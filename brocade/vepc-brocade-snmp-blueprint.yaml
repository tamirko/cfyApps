tosca_definitions_version: cloudify_dsl_1_3
imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml
  - types/snmp-types.yaml
  - plugin.yaml

inputs:
  image:
    description: OpenStack image ID to use
    default: 2e6bed2c-a95e-4896-b634-e95d4a3ae32a
    required: true

  flavor:
    description: Openstack flavor name or id to use
    # 'RAM: 1024 MB, 80 GB, 1 VCPU
    default: 718f2a6d-52c5-4f23-a774-49df51c6eedc
    required: true

  # Networking
  neutron_subnet_public_cidr_block:
    type: string
    default: 10.0.1.0/24

  neutron_subnet_public_gateway:
    type: string
    default: '10.0.1.1'

  neutron_subnet_private_cidr_block:
    type: string
    default: 10.0.2.0/24

  neutron_subnet_private_gateway:
    type: string
    default: '10.0.2.1'

  # FortiGate
  fortigate_port_public:
    type: string
    default: port1

  fortigate_port_private:
    type: string
    default: port2

  fortigate_port_mgmt:
    type: string
    default: port3

  security_group_name_ssh_only:
    type: string

  external_network_name:
    type: string

  network_public_name:
    type: string

  use_existing_network_public:
    type: boolean

  subnet_public_name:
    type: string

  use_existing_subnet_public:
    type: boolean

  subnet_public_router_name:
    type: string

  network_private_name:
    type: string

  use_existing_network_private:
    type: boolean

  subnet_private_name:
    type: string

  use_existing_subnet_private:
    type: boolean

  mgmt_network_name:
    type: string

  use_existing_mgmt_network:
    type: boolean

  mgmt_subnet_name:
    type: string

  use_existing_mgmt_subnet:
    type: boolean

  nerwork_public_dns_nameservers:
    type: string

  nerwork_private_dns_nameservers:
    type: string

  snmp_proxy_image:
    type: string

  snmp_proxy_flavor:
    type: string

  proxy_agent_user:
    type: string
    default: ubuntu


dsl_definitions:
  # Use the public IP created by "floating_ip"
  ssh_config: &ssh_config
    host_string: { get_attribute: [floating_ip, floating_ip_address ] }
    user: admin
    password: ''


node_types:

  VYATTA_OS:
    derived_from: cloudify.nodes.Root
    properties:
      city:
        type: string

  VNF_VM:
    derived_from: cloudify.nodes.Compute
    properties:
      agent_config:
        default: {"install_method":"none"}

  VNF:
    derived_from: cloudify.nodes.Root
    properties:
      myType:
        default: "Generic VNF"
      myStr1:
        default: aaa
      myStr2:
        default: bbb
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: scripts/startVNF.sh
          executor: central_deployment_agent

  DUMMY_FORTIGATE:
    derived_from: VNF
    properties:
      myType:
        default: "DUMMY FORTIGATE VNF"

  VYATTA_ROUTER:
    derived_from: VNF
    properties:
      myType:
        default: "DUMMY ROUTER VNF"

node_templates:

  security_group_ssh_only:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      use_external_resource: true
      resource_id: { get_input: security_group_name_ssh_only }

  additional_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 161
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 162
        - remote_ip_prefix: 0.0.0.0/0
          port: 80
        - remote_ip_prefix: 0.0.0.0/0
          port: 443
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
          port: 161
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
          port: 162
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
          port: 80
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
          port: 443


  # Floating IP for use with the public interface
  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: external_network_name }


  #####################
  # PUBLIC NETWORKING #
  #####################
  network_public:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_network_public }
      resource_id: { get_input: network_public_name }

  subnet_public:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_subnet_public }
      resource_id: { get_input: subnet_public_name }
      subnet:
        ip_version: 4
        cidr: { get_input: neutron_subnet_public_cidr_block }
        dns_nameservers: { get_input: nerwork_public_dns_nameservers }
        gateway_ip: { get_input: neutron_subnet_public_gateway }
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_public
    - target: subnet_public_router
      type: cloudify.openstack.subnet_connected_to_router

  subnet_public_router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: { get_input: subnet_public_router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  port_public:
    type: cloudify.openstack.nodes.Port
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_public
    - type: cloudify.openstack.port_connected_to_subnet
      target: subnet_public
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group_ssh_only
    - type: cloudify.openstack.port_connected_to_security_group
      target: additional_security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: floating_ip


  ######################
  # PRIVATE NETWORKING #
  ######################
  network_private:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_network_private }
      resource_id: { get_input: network_private_name }

  subnet_private:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_subnet_private }
      resource_id: { get_input: subnet_private_name }
      subnet:
        ip_version: 4
        cidr: { get_input: neutron_subnet_private_cidr_block }
        dns_nameservers: { get_input: nerwork_private_dns_nameservers }
        gateway_ip: { get_input: neutron_subnet_private_gateway }
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_private

  port_private:
    type: cloudify.openstack.nodes.Port
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_private
    - type: cloudify.openstack.port_connected_to_subnet
      target: subnet_private
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group_ssh_only
    - type: cloudify.openstack.port_connected_to_security_group
      target: additional_security_group

  #########################
  # MANAGEMENT NETWORKING #
  #########################
  network_mgmt:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_mgmt_network }
      resource_id: { get_input: mgmt_network_name }


  subnet_mgmt:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_mgmt_subnet }
      resource_id: { get_input: mgmt_subnet_name }
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_mgmt

  port_mgmt:
    type: cloudify.openstack.nodes.Port
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_mgmt
    - type: cloudify.openstack.port_connected_to_subnet
      target: subnet_mgmt
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group_ssh_only
    - type: cloudify.openstack.port_connected_to_security_group
      target: additional_security_group

  ######################
  # FORTIGATE INSTANCE #
  ######################
  # This will create a new FortiGate instance that will have
  # 3 network interfaces set up.
  # NIC#1 (PORT1) is Public / WAN (Floating IP)
  # NIC#2 (PORT2) is Private / LAN
  # NIC#3 (PORT3) is Management / MGMT
  FORTIGATE_1_VM:
    type: cloudify.openstack.nodes.Server
    properties:
      image: { get_input: image }
      flavor: { get_input: flavor }
      management_network_name: { get_property: [network_mgmt, resource_id] }
      agent_config:
        install_method: none
    relationships:
      #- type: cloudify.openstack.server_connected_to_keypair
      #  target: key_pair
      - type: cloudify.relationships.contained_in
        target: EMPIRE_STATE_VYATTA_OS
      - type: cloudify.openstack.server_connected_to_port
        target: port_public
      - type: cloudify.openstack.server_connected_to_port
        target: port_private
      - type: cloudify.openstack.server_connected_to_port
        target: port_mgmt
      - type: cloudify.relationships.depends_on
        target: floating_ip
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            unlink: openstack.nova_plugin.server.disconnect_floatingip

  FORTIGATE_1_aliases:
    type: cloudify.nodes.Root
    relationships:
    - type: cloudify.relationships.contained_in
      target: FORTIGATE_1_VM


  # Configure each interface with aliases
  fortigate_1_wan_alias:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_public }
            config:
            - alias: WAN
            ssh_config: *ssh_config
        delete:
          implementation: fortinet.fortigate.config.delete
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_public }
            config:
            - alias: WAN
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: FORTIGATE_1_aliases

  fortigate_1_lan_alias:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_private }
            config:
            - alias: LAN
            ssh_config: *ssh_config
        delete:
          implementation: fortinet.fortigate.config.delete
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_private }
            config:
            - alias: LAN
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: FORTIGATE_1_aliases

  fortigate_1_mgmt_alias:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_mgmt }
            config:
            - alias: MGMT
            ssh_config: *ssh_config
        delete:
          implementation: fortinet.fortigate.config.delete
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_mgmt }
            config:
            - alias: MGMT
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: FORTIGATE_1_aliases

  fortigate_1_snmp:
    type: cloudify.nodes.Root
    relationships:
    - type: cloudify.relationships.contained_in
      target: FORTIGATE_1_VM

  fortigate_1_snmp_config:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system snmp sysinfo
            config_id: description
            config:
            - status: enable
            - description: '"My SNMP sysinfo description"'
            - contact-info: '"Cloudify SNMP"'
            - location: '"Everywhere"'
            ssh_config: *ssh_config
        delete:
          implementation: fortinet.fortigate.config.delete
          inputs:
            config_name: system snmp sysinfo
            config_id: description
            config:
            - description: '"My SNMP sysinfo description"'
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: fortigate_1_snmp

  fortigate_1_snmp_community_config:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system snmp community
            config_id: 1
            config:
            - name: '"public"'
            - config: hosts
            - edit: 1
            - next: ''
            - end: ''
            - events: cpu-high mem-low log-full intf-ip vpn-tun-up vpn-tun-down ha-switch ha-hb-failure ips-signature ips-anomaly av-virus av-oversize av-pattern av-fragmented fm-if-change bgp-established bgp-backward-transition ha-member-up ha-member-down ent-conf-change av-conserve av-bypass av-oversize-passed av-oversize-blocked ips-pkg-update ips-fail-open faz-disconnect wc-ap-up wc-ap-down
            - next: ''
            ssh_config: *ssh_config
        delete:
          implementation: fortinet.fortigate.config.delete
          inputs:
            config_name: system snmp community
            config_id: 1
            config:
            - name: '"public"'
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: fortigate_1_snmp
    - type: cloudify.relationships.depends_on
      target: fortigate_1_snmp_config

  snmp_proxy_vm:
    type: cloudify.openstack.nodes.Server
    properties:
      agent_config:
        user: { get_input: proxy_agent_user }
      image: { get_input: snmp_proxy_image }
      flavor: { get_input: snmp_proxy_flavor }
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
    relationships:
      - type: cloudify.openstack.server_connected_to_port
        target: proxy_port


  snmp_proxy:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create: scripts/install_requirements.sh
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
                SNMPProxyCollector:
                  path: collectors/snmpproxy_exp_log.py
                  config: { get_attribute: [SELF, snmp_collector_config] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: fortigate_1_snmp_community_config # Assure that Diamond starts after snmpd is configured
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: scripts/append_diamond_conf.py
              inputs:
                host: { get_attribute: [floating_ip, floating_ip_address] }
                port : 161
                community: public
                oids:
                  1.3.6.1.4.1.2021.10.1.3.1: total.system
                  1.3.6.1.4.1.2021.10.1.3.2: total.user
                  1.3.6.1.4.1.12356.1.9.0: fnSysMemUsage
                  1.3.6.1.4.1.12356.1.10.0: fnSysSesCount
                  1.3.6.1.4.1.12356.101.3.1.1: fgVdNumber
                  1.3.6.1.4.1.12356.101.4.1.3.0: fgSysCpuUsage
                  1.3.6.1.4.1.12356.101.4.1.6: fgSysDiskUsage
                  1.3.6.1.4.1.12356.101.4.6.1.1.0: fgSIAdvMemPageCache
                  1.3.6.1.4.1.12356.101.4.6.1.2.0: fgSIAdvMemCacheActive
                  1.3.6.1.4.1.12356.101.4.5.3.1.7: fgProcModMemUsage
                  1.3.6.1.4.1.12356.101.4.6.1.4.0: fgSIAdvMemBuffer
                  1.3.6.1.4.1.12356.101.10.112.1.2: fgExplicitProxyMemUsage
                  1.3.6.1.4.1.12356.101.10.114.1.3: fgMemCacheHits
      - type: cloudify.relationships.contained_in
        target: snmp_proxy_vm
      - type: cloudify.relationships.connected_to
        target: FORTIGATE_2
      - type: cloudify.relationships.connected_to
        target: FORTIGATE_3


  proxy_port:
    type: cloudify.openstack.nodes.Port
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_mgmt
    - type: cloudify.openstack.port_connected_to_subnet
      target: subnet_mgmt
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group_ssh_only
    - type: cloudify.openstack.port_connected_to_security_group
      target: additional_security_group

  EMPIRE_STATE_VYATTA_OS:
    type: VYATTA_OS
    properties:
      city: New York City
    instances:
      deploy: 1


  VYATTA_1_VM:
    type: VNF_VM
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: EMPIRE_STATE_VYATTA_OS

  VYATTA_1:
    type: VYATTA_ROUTER
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: VYATTA_1_VM
      - type: cloudify.relationships.connected_to
        target: fortigate_1_snmp

  FORTIGATE_2_VM:
    type: VNF_VM
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: GHERKIN_VYATTA_OS

  FORTIGATE_2:
    type: DUMMY_FORTIGATE
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: FORTIGATE_2_VM

  GHERKIN_VYATTA_OS:
    type: VYATTA_OS
    properties:
      city: London
    instances:
      deploy: 1


  FORTIGATE_3_VM:
    type: VNF_VM
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: GHERKIN_VYATTA_OS

  FORTIGATE_3:
    type: DUMMY_FORTIGATE
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: FORTIGATE_3_VM

  VYATTA_3_VM:
    type: VNF_VM
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: GHERKIN_VYATTA_OS

  VYATTA_3:
    type: VYATTA_ROUTER
    instances:
      deploy: 1
    relationships:
      - type: cloudify.relationships.contained_in
        target: VYATTA_3_VM
      - type: cloudify.relationships.connected_to
        target: FORTIGATE_3


groups:

  EMPIRE_STATE_BRANCH:
    members: [EMPIRE_STATE_VYATTA_OS]

  GHERKIN_BRANCH:
    members: [GHERKIN_VYATTA_OS]

  network:
    members: [ports, mgmt, public, private, secgrp,floating_ip, external_network]
  mgmt:
    members: [network_mgmt, subnet_mgmt]
  public:
    members: [network_public, subnet_public, subnet_public_router]
  private:
    members: [network_private, subnet_private]
  secgrp:
    members: [security_group_ssh_only, additional_security_group]
  ports:
    members: [port_mgmt, port_public, port_private, proxy_port]
#  fortigate:
#    members: [FORTIGATE_1_VM, fortigate_1_snmp]
#  fortigate_1_snmp:
#    members: [fortigate_1_snmp_config, fortigate_1_snmp_community_config]
  SNMP:
    members: [snmp_proxy_vm, snmp_proxy]

outputs:
  fortigate_vm_public_ip:
    description: FortiGate Public IP
    value: { get_attribute: [floating_ip, floating_ip_address ] }
  ssh_config:
    description: FortiGate SSH configuration
    value: { get_attribute: [fortigate_1_wan_alias, ssh_config] }