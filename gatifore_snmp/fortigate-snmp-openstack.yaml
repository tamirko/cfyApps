tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint describes an OpenStack vm created using Cloudify's OpenStack plugin
  and simple web server started using Cloudify's script plugin.
  In addition, an OpenStack floating ip and security group are created and associated with the created vm.

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.3/plugin.yaml
  - types/snmp-types.yaml
#  - https://raw.githubusercontent.com/GigaSpaces-ProfessionalServices/cloudify-fortinet-plugin/dev/plugin.yaml
  - plugin.yaml

inputs:
  image:
    description: OpenStack image ID to use
    default: 2e6bed2c-a95e-4896-b634-e95d4a3ae32a
    required: true

  flavor:
    description: Openstack flavor name or id to use
    # 'RAM: 1024 MB, 80 GB, 1 VCPU
    default: 718f2a6d-52c5-4f23-a774-49df51c6eedc
    required: true
    
  # Networking
  neutron_subnet_public_cidr_block:
    type: string
    default: 10.0.1.0/24
    
  neutron_subnet_public_gateway:
    type: string
    default: '10.0.1.1'
    
  neutron_subnet_private_cidr_block:
    type: string
    default: 10.0.2.0/24
    
  neutron_subnet_private_gateway:
    type: string
    default: '10.0.2.1'
    
  # FortiGate
  fortigate_port_public:
    type: string
    default: port1

  fortigate_port_private:
    type: string
    default: port2
    
  fortigate_port_mgmt:
    type: string
    default: port3

  security_group_name_ssh_only:
    type: string

  external_network_name:
    type: string

  network_public_name:
    type: string

  use_existing_network_public:
    type: boolean

  subnet_public_name:
    type: string

  use_existing_subnet_public:
    type: boolean

  subnet_public_router_name:
    type: string

  network_private_name:
    type: string

  use_existing_network_private:
    type: boolean

  subnet_private_name:
    type: string

  use_existing_subnet_private:
    type: boolean

  mgmt_network_name:
    type: string

  use_existing_mgmt_network:
    type: boolean

  mgmt_subnet_name:
    type: string

  use_existing_mgmt_subnet:
    type: boolean

  nerwork_public_dns_nameservers:
    type: string

  nerwork_private_dns_nameservers:
    type: string

  snmp_proxy_image:
    type: string

  snmp_proxy_flavor:
    type: string

  proxy_agent_user:
    type: string
    default: ubuntu

dsl_definitions:
  # By default, the FortiGate AWS AMI uses a blank password
  # Use the public IP created by "floating_ip"
  ssh_config: &ssh_config
    host_string: { get_attribute: [floating_ip, floating_ip_address ] }
    user: admin
    password: ''


node_templates:

  # Use an existing key pair in OpenStack
  #key_pair:
  #  type: cloudify.openstack.nodes.KeyPair
  #  properties:
  #    use_external_resource: true
  #    resource_id: { get_input: agent_public_key_name }
  #    private_key_path: { get_input: agent_private_key_path }

  # Security group that only allows SSH access to the FortiGate
  security_group_ssh_only:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      use_external_resource: true
      resource_id: { get_input: security_group_name_ssh_only }

  additional_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 161
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 162
        - remote_ip_prefix: 0.0.0.0/0
          port: 80
        - remote_ip_prefix: 0.0.0.0/0
          port: 443
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
          port: 161
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
          port: 162
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
          port: 80
        - direction: egress
          remote_ip_prefix: 0.0.0.0/0
          port: 443


  # Floating IP for use with the public interface
  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              floating_network_name: { get_input: external_network_name }


  #####################
  # PUBLIC NETWORKING #
  #####################
  network_public:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_network_public }
      resource_id: { get_input: network_public_name }
      
  subnet_public:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_subnet_public }
      resource_id: { get_input: subnet_public_name }
      subnet:
        ip_version: 4
        cidr: { get_input: neutron_subnet_public_cidr_block }
        dns_nameservers: { get_input: nerwork_public_dns_nameservers }
        gateway_ip: { get_input: neutron_subnet_public_gateway }
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_public
    - target: subnet_public_router
      type: cloudify.openstack.subnet_connected_to_router

  subnet_public_router:
    type: cloudify.openstack.nodes.Router
    properties:
      resource_id: { get_input: subnet_public_router_name }
    relationships:
      - target: external_network
        type: cloudify.relationships.connected_to

  external_network:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: true
      resource_id: { get_input: external_network_name }

  port_public:
    type: cloudify.openstack.nodes.Port
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_public
    - type: cloudify.openstack.port_connected_to_subnet
      target: subnet_public
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group_ssh_only
    - type: cloudify.openstack.port_connected_to_security_group
      target: additional_security_group
    - type: cloudify.openstack.port_connected_to_floating_ip
      target: floating_ip
    

  ######################
  # PRIVATE NETWORKING #
  ######################
  network_private:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_network_private }
      resource_id: { get_input: network_private_name }
      
  subnet_private:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_subnet_private }
      resource_id: { get_input: subnet_private_name }
      subnet:
        ip_version: 4
        cidr: { get_input: neutron_subnet_private_cidr_block }
        dns_nameservers: { get_input: nerwork_private_dns_nameservers }
        gateway_ip: { get_input: neutron_subnet_private_gateway }
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_private
      
  port_private:
    type: cloudify.openstack.nodes.Port
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_private
    - type: cloudify.openstack.port_connected_to_subnet
      target: subnet_private
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group_ssh_only
    - type: cloudify.openstack.port_connected_to_security_group
      target: additional_security_group

  #########################
  # MANAGEMENT NETWORKING #
  #########################
  network_mgmt:
    type: cloudify.openstack.nodes.Network
    properties:
      use_external_resource: { get_input: use_existing_mgmt_network }
      resource_id: { get_input: mgmt_network_name }

      
  subnet_mgmt:
    type: cloudify.openstack.nodes.Subnet
    properties:
      use_external_resource: { get_input: use_existing_mgmt_subnet }
      resource_id: { get_input: mgmt_subnet_name }
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_mgmt
      
  port_mgmt:
    type: cloudify.openstack.nodes.Port
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_mgmt
    - type: cloudify.openstack.port_connected_to_subnet
      target: subnet_mgmt
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group_ssh_only
    - type: cloudify.openstack.port_connected_to_security_group
      target: additional_security_group

  ######################
  # FORTIGATE INSTANCE #
  ######################
  # This will create a new FortiGate instance that will have
  # 3 network interfaces set up.
  # NIC#1 (PORT1) is Public / WAN (Floating IP)
  # NIC#2 (PORT2) is Private / LAN
  # NIC#3 (PORT3) is Management / MGMT
  fortigate_vm:
    type: cloudify.openstack.nodes.Server
    properties:
      image: { get_input: image }
      flavor: { get_input: flavor }
      management_network_name: { get_property: [network_mgmt, resource_id] }
      agent_config:
        install_method: none
    relationships:
      #- type: cloudify.openstack.server_connected_to_keypair
      #  target: key_pair
      - type: cloudify.openstack.server_connected_to_port
        target: port_public
      - type: cloudify.openstack.server_connected_to_port
        target: port_private
      - type: cloudify.openstack.server_connected_to_port
        target: port_mgmt
      - type: cloudify.relationships.depends_on
        target: floating_ip
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            unlink: openstack.nova_plugin.server.disconnect_floatingip


  # Configure each interface with aliases
  fortigate_wan_alias:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_public }
            config:
            - alias: WAN
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: fortigate_vm
      
  fortigate_lan_alias:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_private }
            config:
            - alias: LAN
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: fortigate_vm
      
  fortigate_mgmt_alias:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system interface
            config_id: { get_input: fortigate_port_mgmt }
            config:
            - alias: MGMT
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: fortigate_vm

  fortigate_snmp_config:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system snmp sysinfo
            config:
            - status: enable
            - description: '"My SNMP sysinfo description"'
            - contact-info: '"Cloudify SNMP"'
            - location: '"Everywhere"'
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: fortigate_vm

  fortigate_snmp_community_config:
    type: cloudify.Fortinet.FortiGate.Config
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            config_name: system snmp community
            config_id: 1
            config:
            - name: '"public"'
            - config: hosts
            - edit: 1
            - next: ''
            - end: ''
            - events: cpu-high mem-low log-full intf-ip vpn-tun-up vpn-tun-down ha-switch ha-hb-failure ips-signature ips-anomaly av-virus av-oversize av-pattern av-fragmented fm-if-change bgp-established bgp-backward-transition ha-member-up ha-member-down ent-conf-change av-conserve av-bypass av-oversize-passed av-oversize-blocked ips-pkg-update ips-fail-open faz-disconnect wc-ap-up wc-ap-down
            - next: ''
            ssh_config: *ssh_config
    relationships:
    - type: cloudify.relationships.contained_in
      target: fortigate_vm
    - type: cloudify.relationships.depends_on
      target: fortigate_snmp_config

  proxy_server:
    type: cloudify.openstack.nodes.Server
    properties:
      agent_config:
        user: { get_input: proxy_agent_user }
      image: { get_input: snmp_proxy_image }
      flavor: { get_input: snmp_proxy_flavor }
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
    relationships:
      - type: cloudify.openstack.server_connected_to_port
        target: proxy_port


  proxy_node:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create: scripts/install_requirements.sh
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
                SNMPProxyCollector:
                  path: collectors/snmpproxy_exp_log.py
                  config: { get_attribute: [SELF, snmp_collector_config] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: fortigate_snmp_community_config # Assure that Diamond starts after snmpd is configured
      - type: cloudify.relationships.contained_in
        target: proxy_server
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: scripts/append_diamond_conf.py
              inputs:
                host: { get_attribute: [floating_ip, floating_ip_address] }
                port : 161
                community: public
                oids:
                  1.3.6.1.4.1.2021.10.1.3.1: total.system
                  1.3.6.1.4.1.2021.10.1.3.2: total.user
                  1.3.6.1.4.1.12356.1.8.0: fnSysCpuUsage
                  1.3.6.1.4.1.12356.1.9.0: fnSysMemUsage
                  1.3.6.1.4.1.12356.1.10.0: fnSysSesCount
                  1.3.6.1.4.1.12356.101.3.1.1: fgVdNumber
                  1.3.6.1.4.1.12356.101.4.1.6: fgSysDiskUsage
                  1.3.6.1.4.1.12356.101.4.6.1.1.0: m46110
                  1.3.6.1.4.1.12356.101.4.6.1.2.0: m46120
                  1.3.6.1.4.1.12356.101.4.6.1.3.0: m46130
                  1.3.6.1.4.1.12356.101.4.6.1.4.0: m46140
                  1.3.6.1.4.1.12356.101.4.6.1.5.0: m46150
                  1.3.6.1.4.1.12356.101.4.6.1.6.0: m46160
                  1.3.6.1.4.1.12356.101.4.6.1.7.0: m46170
                  1.3.6.1.4.1.12356.101.4.6.1.8.0: m46180
                  1.3.6.1.4.1.12356.101.4.6.2.2.0: m46220
                  1.3.6.1.4.1.12356.101.10.112.1.2: fgExplicitProxyMemUsage
                  1.3.6.1.4.1.12356.101.10.114.1.3: fgMemCacheHits

  proxy_port:
    type: cloudify.openstack.nodes.Port
    relationships:
    - type: cloudify.relationships.contained_in
      target: network_mgmt
    - type: cloudify.openstack.port_connected_to_subnet
      target: subnet_mgmt
    - type: cloudify.openstack.port_connected_to_security_group
      target: security_group_ssh_only
    - type: cloudify.openstack.port_connected_to_security_group
      target: additional_security_group


groups:
  network:
    members: [ports, mgmt, public, private, secgrp,floating_ip, external_network]
  mgmt:
    members: [network_mgmt, subnet_mgmt]
  public:
    members: [network_public, subnet_public, subnet_public_router]
  private:
    members: [network_private, subnet_private]
  secgrp:
    members: [security_group_ssh_only, additional_security_group]
  ports:
    members: [port_mgmt, port_public, port_private]
  fortigate:
    members: [fortigate_vm, fortigate_snmp]
  fortigate_snmp:
    members: [fortigate_snmp_config, fortigate_snmp_community_config]
  proxy_snmp_grp:
    members: [proxy_server, proxy_node, proxy_port]

outputs:
  fortigate_vm_public_ip:
    description: FortiGate Public IP
    value: { get_attribute: [floating_ip, floating_ip_address ] }
  ssh_config:
    description: FortiGate SSH configuration
    value: { get_attribute: [fortigate_wan_alias, ssh_config] }

#  mkdir -p ~/tmp/mywgn
#  cd ~/tmp/mywgn
# /usr/local/bin/wagon create -s ~/cloudify-cosmo/cfyApps/gatifore
